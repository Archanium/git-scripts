#! /bin/bash
# https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
# Use -gt 1 to consume two arguments per pass in the loop (e.g. each
# argument has a corresponding value to go with it).
# Use -gt 0 to consume one or more arguments per pass in the loop (e.g.
# some arguments don't have a corresponding value to go with it such
# as in the --default example).
# note: if this is set to -gt 0 the /etc/hosts part is not recognized ( may be a bug )
BRANCH=master
POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"
case $key in
    -i|--issues)
    ISSUES=true
    shift # past argument
    ;;
    -r|--release)
    RELEASE=true
    shift
    ;;
    *)
    POSITIONAL+=("$1")
    shift
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters
if [[ ! -z $1 ]]
then
  BRANCH=$1
fi
#echo "RELEASE ${RELEASE}"
#echo "BRANCH ${BRANCH}"
#echo "ISSUES ${ISSUES}"
LAST_TAG=$(git tag --list | sort --key 1.2 --numeric --reverse | head -n 1)
if [[ -z $RELEASE ]]; then
echo "Things being released compared to ${LAST_TAG} and current ${BRANCH}"
echo ""
fi;
if [[ ! -z $ISSUES ]]
then
    git log --oneline --pretty=format:"%s -> %an" --no-merges "${LAST_TAG}..${BRANCH}" --reverse | grep -E '[A-Z]+-[[:digit:]]+' | sort --unique --key=1,1 | sed -e 's/[()]//g' | sed --regexp-extended -e 's/#[0-9]+//g' -e 's/(  +)/ /g'
else
    git log --oneline --pretty=format:"%s -> %an" --no-merges "${LAST_TAG}..${BRANCH}" --reverse | grep -E '[A-Z]+-[[:digit:]]+' | sed -e 's/[()]//g' | sed --regexp-extended -e 's/#[0-9]+//g' -e 's/(  +)/ /g'
fi

